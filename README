Please refer to INSTALL file concerning installation instructions.

At the  moment, only Awesome  Window Manager has been  heavily tested,
but it should work properly with any Window Manager following EWMH and
ICCCM specifications.

Once you have  built the program, you can run it  by simply typing the
following command:

$ unagi

It will look for 'unagi' configuration directory in `$XDG_CONFIG_HOME'
(usually `$HOME/.config/unagi'), then in `$sysconfigdir/xdg/unagi' (by
default `/usr/local/etc/xdg/unagi')  and finally fallback in  XDG Base
Directories    (usually   `/etc/xdg/unagi'),    if   `XDG_CONFIG_DIRS'
environment  variable  is  not  defined (as  specified  in  `XDG  Base
Directory Specification').   You can also specified  the configuration
directory file by passing `-c' option.

You may  find the program  documentation in doc/ directory  in various
format (HTML, LaTeX and man pages).

You  can  also  run  it  without installing  anything  by  typing  the
following command from the source directory:

$ ./src/unagi  -r rendering/.libs/ -p plugins/.libs/ -c conf/

Once Unagi has been installed and  started, you can also send messages
to Unagi message bus (D-Bus)  through `unagi-client' wrapper.  You can
see available commands  by typing the following  command (available in
`src/' directory from the source tree):

$ unagi-client --help

Awesome configuration for windows opacity
=========================================

The following  sets opacity to 0.8  for URxvt (you can  use `xprop' to
find out what is the class (WM_CLASS property)):

awful.rules.rules = {
    ...
    { rule = { class = "URxvt" },
      properties = { opacity = 0.8 } },
}

Opacity depending on windows focus
----------------------------------

The following sets opacity for Emacs  and Rxvt to 0.9 when focused and
0.7  otherwise (you  can use  `xprop' to  find out  what is  the class
(WM_CLASS property)):

client.add_signal(
   "focus",
   function(c)
      if c.class:lower():find("rxvt") or c.class:lower():find("emacs") then
         c.border_color = beautiful.border_focus
         c.opacity = 0.9
      end
   end)

client.add_signal(
   "unfocus",
   function(c)
      if c.class:lower():find("rxvt") or c.class:lower():find("emacs") then
         c.border_color = beautiful.border_normal
         c.opacity = 0.7
      end
   end)

Expose
======

You  can  setup  all   Expose  settings  through  `plugin_expose.conf'
configuration  file.   Note that  the  keys  names  are XKB  ones  (as
returned for  example by `xmodmap  -pke') and  that at the  moment you
cannot specify any modifiers though.

You can  start Expose with  the following  commands (and then  use the
mouse or  keybindings defined in  the configuration file to  select or
navigate between windows):

$ unagi-client plugin.expose.enter

`window-select-cmd' or why I don't end up on the Window I selected?
-------------------------------------------------------------------

`window-select-cmd'  allow to  specify  a shell  command  to select  a
Window through Expose, so you  can use awesome-client or your favorite
Window  Manager client  command  instead of  EWMH  standards that  all
Window Manager  should follow. The  shell command *MUST*  contain `%d'
and corresponds to the selected Window ID.

Here are some reasons why you may need it:

  * EWMH standards is utterly broken for multiple monitors with XRandR
    (eg _NET_*_DESKTOP* only considers one monitor), so if your select
    a Window on  the secondary monitor, you may end  up at the desktop
    number of the secondary monitor *but* on the primary monitor...

  * If you  notice that for some  reasons your Window Manager  or some
    extensions (for example Shifty for  Awesome has such bug) does not
    handle    well     Root    Property     _NET_CURRENT_DESKTOP    or
    _NET_ACTIVE_WINDOW    (`xprop   -root`)    or   Window    Property
    _NET_ACTIVE_WINDOW (`xprop' then click on the Window).

The following  sections give some examples  how it can be  set up with
Awesome.

Awesome < 3.5-rc1 configuration
+++++++++++++++++++++++++++++++

As `jumpto' function is not  implemented before that version, you need
to add the following to your Awesome `rc.lua':

-- Jump to the given client.  Takes care of focussing the screen, the right tag,
-- etc.
-- @param c the client to jump to
-- @param merge If true then merge tags when clients are not visible.
function jumpto(c)
    local capi = {client = client,
                  mouse = mouse,
                  screen = screen}

    local tag = require("awful.tag")
    local s = capi.client.focus and capi.client.focus.screen or capi.mouse.screen
    -- focus the screen
    if s ~= c.screen then
        capi.mouse.screen = c.screen
    end

    -- Try to make client visible, this also covers e.g. sticky
    local t = c:tags()[1]
    if t and not c:isvisible() then
        if merge then
            t.selected = true
        else
            tag.viewonly(t)
        end
    end

    -- focus the client
    capi.client.focus = c
    c:raise()
end
awful.client.jumpto = jumpto

Then, you can set `window-select-cmd' (note the `%d'):

window-select-cmd = "echo 'for k, c in pairs(client.get()) do if c.window == %d then awful.client.jumpto(c); break end end' | awesome-client"

Xephyr
======

You may want to use Xephyr (nested X server) for debugging:

$ Xephyr -screen 1024x768 -ac -br :1

Then  run  the  command  given  in  the  previous  section  by  adding
DISPLAY=:1 at the beginning. You  may want to run other X applications
(such  as Awesome  window manager)  by setting  DISPLAY=:1 environment
variable before.
